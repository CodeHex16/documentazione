name: Compile Typst docs

on:
    push:
        branches:
            - main

permissions:
    contents: write

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ssh-key: ${{ secrets.DEPLOY_KEY }}

            - name: Setup Typst
              uses: typst-community/setup-typst@v4

            - name: Cache fonts
              id: cache-fonts
              uses: actions/cache@v4
              with:
                  path: ~/.local/share/fonts
                  key: fonts-${{ runner.os }}-noto-jetbrains
                  restore-keys: |
                      fonts-${{ runner.os }}-

            - name: Install fonts
              if: steps.cache-fonts.outputs.cache-hit != 'true'
              run: |
                  mkdir -p ~/.local/share/fonts
                  wget https://noto-website-2.storage.googleapis.com/pkgs/NotoSans-unhinted.zip -O /tmp/NotoSans-unhinted.zip
                  unzip /tmp/NotoSans-unhinted.zip -d ~/.local/share/fonts
                  wget https://download.jetbrains.com/fonts/JetBrainsMono-2.242.zip -O /tmp/JetBrainsMono.zip
                  unzip /tmp/JetBrainsMono.zip -d ~/.local/share/fonts
                  fc-cache -f -v

            - name: Clean old PDFs
              run: |
                  find . -name "*.pdf" ! -name "*_ext.pdf" ! -name "*_firmato.pdf" -not -path "./diari-di-bordo/*" -not -path "*/presentazione/Presentazione-*.pdf" -delete

            - name: Process Glossario # Esecuzione script glossario
              run: |
                  cd glossario/source
                  python glossario.py
                  cd ../..

            - name: Compile Typst documents
              run: |
                  find . -path ./template -prune -o -name "*.typ" -print0 | while IFS= read -r -d '' file; do
                    output="${file%.typ}.pdf"
                    echo "Compilando: $file -> $output"
                    typst compile --root . "$file" "$output" --font-path ~/.local/share/fonts
                  done

            - name: Remove PDF files with same name as _ext or _firmato
              run: |
                  find . -name "*_ext.pdf" -o -name "*_firmato.pdf" | while read -r file; do
                      base=$(basename "$file" "_ext.pdf")
                      base=${base%_firmato.pdf}
                      if [ -n "$base" ]; then
                        echo "Eliminazione di: ${base}.pdf"
                        find . -name "${base}.pdf" -exec rm {} \;
                      else
                        echo "Base non valida per il file: $file"
                      fi
                  done

            - name: Move PDFs to parent
              run: |
                  find . -name "*.pdf" ! -name "*_ext.pdf" ! -name "*_firmato.pdf" -not -path "./diari-di-bordo/*" -exec sh -c 'mv "$0" "$(dirname "$0")/../"' {} \;

            - name: List all PDF files
              run: find . -name "*.pdf" ! -name "*_ext.pdf" ! -name "*_firmato.pdf" -not -path "./diari-di-bordo/*"

            - name: Upload PDF artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: Documentazione-CodeHex16
                  path: "**/*.pdf"

            - name: Install tree-emoji-cli
              run: npm install -g tree-emoji-cli

            - name: Update README with directory tree # Generazione tree e update README.md
              run: |
                  tree -l 6 -d -o tree.txt --noreport
                  python3 -c "
                  import re

                  tree = ''
                  with open('tree.txt', 'r') as file:
                    lines = file.readlines()
                    lines[1] = 'documentazione/\n' # Modifica il nome della cartella principale
                    tree = ''.join(lines)
                    tree = tree.strip()

                  new_content = []
                  new_content.append('<!-- INIZIO TREE DIRECTORY -->')
                  new_content.append('\`\`\`')
                  for line in tree.split('\n'):
                    if 'template' in line:
                      line += '\t\t# file di template per i documenti'
                    elif 'image' in line:
                      line += '\t\t# assets per i documenti'
                    new_content.append(line)
                    if 'source' in line:
                      new_line = line.replace('üìÅ source', 'üìÑ *.pdf')
                      new_content.append(new_line)

                  new_content.append('\`\`\`')
                  new_content.append('<!-- FINE TREE DIRECTORY -->')
                  tree = '\n'.join(new_content)        

                  print(tree)
                  with open('README.md', 'r+') as readme:
                    content = readme.read()
                    content = re.sub('<!-- INIZIO TREE DIRECTORY -->?(.*?)<!-- FINE TREE DIRECTORY -->', tree.strip(), content, flags=re.DOTALL)
                    readme.seek(0)
                    readme.write(content)
                  "
                  cat README.md
                  rm tree.txt

            - name: Commit and push PDFs and README
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git pull
                  git add .
                  git commit -m 'Add compiled PDF files and update README.md [skip ci]'
                  git push
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

            - name: Checkout codehex16.github.io repo # Checkout repo codehex16.github.io
              uses: actions/checkout@v4
              with:
                  repository: codehex16/codehex16.github.io
                  token: ${{ secrets.PAT_TOKEN }}
                  path: codehex16.github.io

            - name: Copy PDFs to docs folder
              run: |
                  mkdir -p codehex16.github.io/docs
                  find . -type f -name "*.pdf" \
                    -not -path "./.git/*" \
                    -not -path "./template/*" \
                    -not -path "./.github/*" \
                    -not -path "./codehex16.github.io/*" \
                    -exec rsync -av --relative {} codehex16.github.io/docs/ \;

            - name: Extract glossario.txt # Estrazione glossario.txt
              run: awk '/^\/\/GLOSSARIO/ {flag=1; next} flag' glossario/source/glossario.typ > codehex16.github.io/docs/glossario/glossario.txt

            - name: Generate structure of file in JSON
              working-directory: codehex16.github.io
              run: |
                  python3 -c '
                  import os
                  import json
                  def dir_to_dict(path):
                      result = {"name": os.path.basename(path)}
                      if os.path.isdir(path):
                          result["type"] = "directory"
                          result["children"] = [dir_to_dict(os.path.join(path, x)) for x in os.listdir(path)]
                      else:
                          result["type"] = "file"
                          result["size"] = os.path.getsize(path) # Aggiungi la dimensione del file
                      return result
                  directory_path = "docs"
                  output = dir_to_dict(directory_path)
                  print(json.dumps(output, indent=2))
                  with open("docs/structure.json", "w") as f:
                      json.dump(dir_to_dict(directory_path), f, indent=2) 
                  '

            - name: Commit and push to codehex16.github.io # Commit e push repo codehex16.github.io
              working-directory: codehex16.github.io
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git add docs/
                  git commit -m 'Add compiled PDF files to docs/' || echo "No changes to commit"
                  git push
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
